//начало текста модуля

#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;

	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)","ЯПодключаюКлиентТестированияСПараметрами",
		"Когда Я подключаю клиент тестирования с параметрами:
     	|    | 'Имя подключения' | 'Порт' | 'Строка соединения'                 | 'Логин' | 'Пароль' | 'Путь к платформе'                                      | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'Test 1'          | '1538' | 'Srvr=""localhost:1941"";Ref=""Test"";' | 'Админ' | 'Админ'  |  'c:\Program Files (x86)\1cv8\8.3.8.2137\bin\1cv8s.exe' | 'c:\СуперОбработка.epf' |  '/UC'                                      |"
		,, "Подключение TestClient.Новое подключение к произвольной базе");

	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт

	//ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	//ДанныеКлиентовТестирования.Очистить();

КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт

КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда Я подключаю клиент тестирования с параметрами:
//@ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)
Процедура ЯПодключаюКлиентТестированияСПараметрами(ТабПарам) Экспорт

	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение "Должно быть передано 2 строки";
	КонецЕсли;
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);

	Ванесса.Шаг("И Я подключаю клиент тестирования """+ИмяКлиентаТестирования+""" из таблицы клиентов тестирования");

КонецПроцедуры

&НаКлиенте
// заполнение таблицы Test Client в vanesse
Функция ПолучитьПараметрыПодключения(ТабПарам)

	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда
		ЭтоLinux = Истина;
	КонецЕсли;

	Стр = Новый Структура;
	Стр.Вставить("Имя",                    "");
	Стр.Вставить("ПутьКИнфобазе",          "");
	Стр.Вставить("ПортЗапускаТестКлиента", "");
	Стр.Вставить("ДопПараметры",           "");
	Стр.Вставить("ТипКлиента",             "");

	ИменаПараметров      = ТабПарам[0];// шапка
	ЗначенияПараметров   = ТабПарам[1];
	СтрокаАутентификации = "";
	Логин       = "";
	ДопПараметр = "";

	Для ккк = 1 По ИменаПараметров.Количество() Цикл
		ИмяПараметра = "";
		ЗначениеПараметра = "";

		ИменаПараметров.Свойство("Кол" + ккк, ИмяПараметра);
		ЗначенияПараметров.Свойство("Кол" + ккк, ЗначениеПараметра);

		Если ВРег(ИмяПараметра) = ВРег("Имя подключения") Тогда
			Стр.Имя = ЗначениеПараметра;
			// проверка заполнения данных
			Если Не ЗначениеЗаполнено(Стр.Имя) Тогда
				ВызватьИсключение "Параметр <Имя подключения> является обязательным!";
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Строка соединения") Тогда
			Стр.ПутьКИнфобазе  = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Порт") Тогда
			Стр.ПортЗапускаТестКлиента = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Логин") Тогда
			Логин = ЗначениеПараметра;
			Если Не ПустаяСтрока(Логин) Тогда
				СтрокаАутентификации = "/N"+Логин;
				Если Найти(Логин, " ") > 0 Тогда
					СтрокаАутентификации = "/N""" + СокрЛП(Логин)+ """";
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Пароль") Тогда
			Если Не ПустаяСтрока(ЗначениеПараметра) Тогда
				Если Найти(ЗначениеПараметра, " ") > 0 Тогда
					СтрокаАутентификации = СтрокаАутентификации + " /P """ + ЗначениеПараметра + "";
				Иначе
					СтрокаАутентификации = СтрокаАутентификации + " /P" + ЗначениеПараметра;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Запускаемая обработка") Тогда
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				Файл = Новый Файл(ЗначениеПараметра);
				Если Не Файл.Существует() Тогда
					ВызватьИсключение "Параметр <Запускаемая обработка> указывает на не существующий файл!";
				КонецЕсли;
				ДопПараметр = ДопПараметр + " /EXECUTE " + """" + ЗначениеПараметра + """";
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Дополнительные параметры строки запуска") Тогда
			ДопПараметр = ДопПараметр + " " + ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Тип клиента") Тогда
			Стр.ТипКлиента = ЗначениеПараметра;

		КонецЕсли;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(Стр.ТипКлиента) Тогда
		Стр.ТипКлиента = "Тонкий";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Стр.ПортЗапускаТестКлиента) Тогда
		Стр.ПортЗапускаТестКлиента = 1538;
	Иначе
		Стр.ПортЗапускаТестКлиента = Число(Стр.ПортЗапускаТестКлиента);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Стр.ПутьКИнфобазе) Тогда
		Стр.ПутьКИнфобазе = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Если СтрокаАутентификации <> "" И Найти(СтрокаАутентификации, "/N") = 0 Тогда
		ВызватьИсключение "Параметр <Логин> не задан";
	КонецЕсли;
	Стр.ДопПараметры = СтрокаАутентификации + " " +ДопПараметр;

	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;

	Отбор = Новый Структура;
	Отбор.Вставить("Имя", Стр.Имя);

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);

	Если НайденныеСтроки.Количество() = 0 Тогда
		// ToDo: проверить нахождение нового порта подключения в таблице клиентов

		НоваяСтрока = ДанныеКлиентовТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	Иначе
		НоваяСтрока = НайденныеСтроки.Получить(0);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		Сообщить("Подключение с именем <"+Стр.Имя+"> перезаполнено в таблице подключений");
	КонецЕсли;

	Возврат Стр.Имя;

КонецФункции

//окончание текста модуля