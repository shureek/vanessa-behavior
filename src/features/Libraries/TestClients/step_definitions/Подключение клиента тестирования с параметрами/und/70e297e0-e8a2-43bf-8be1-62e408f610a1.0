{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"//начало текста модуля

#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;

	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)"",""ЯПодключаюКлиентТестированияСПараметрами"",
		""Когда Я подключаю клиент тестирования с параметрами:
     	|    | 'Имя подключения' | 'Порт' | 'Строка соединения'                 | 'Логин' | 'Пароль' | 'Путь к платформе'                                      | 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |
     	|    | 'Test 1'          | '1538' | 'Srvr=""""localhost:1941"""";Ref=""""Test"""";' | 'Админ' | 'Админ'  |  'c:\Program Files (x86)\1cv8\8.3.8.2137\bin\1cv8s.exe' | 'c:\СуперОбработка.epf' |  '/UC'                                      |""
		,, ""Подключение TestClient.Новое подключение к произвольной базе"");

	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт

	//ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	//ДанныеКлиентовТестирования.Очистить();

КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт

КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда Я подключаю клиент тестирования с параметрами:
//@ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)
Процедура ЯПодключаюКлиентТестированияСПараметрами(ТабПарам) Экспорт

	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение ""Должно быть передано 2 строки"";
	КонецЕсли;
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);

	Ванесса.Шаг(""И Я подключаю клиент тестирования """"""+ИмяКлиентаТестирования+"""""" из таблицы клиентов тестирования"");

КонецПроцедуры

&НаКлиенте
// заполнение таблицы Test Client в vanesse
Функция ПолучитьПараметрыПодключения(ТабПарам)

	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), ""Linux"")>0 Тогда
		ЭтоLinux = Истина;
	КонецЕсли;

	Стр = Новый Структура;
	Стр.Вставить(""Имя"",                    """");
	Стр.Вставить(""ПутьКИнфобазе"",          """");
	Стр.Вставить(""ПортЗапускаТестКлиента"", """");
	Стр.Вставить(""ДопПараметры"",           """");
	Стр.Вставить(""ТипКлиента"",             """");

	ИменаПараметров      = ТабПарам[0];// шапка
	ЗначенияПараметров   = ТабПарам[1];
	СтрокаАутентификации = """";
	Логин       = """";
	ДопПараметр = """";

	Для ккк = 1 По ИменаПараметров.Количество() Цикл
		ИмяПараметра = """";
		ЗначениеПараметра = """";

		ИменаПараметров.Свойство(""Кол"" + ккк, ИмяПараметра);
		ЗначенияПараметров.Свойство(""Кол"" + ккк, ЗначениеПараметра);

		Если ВРег(ИмяПараметра) = ВРег(""Имя подключения"") Тогда
			Стр.Имя = ЗначениеПараметра;
			// проверка заполнения данных
			Если Не ЗначениеЗаполнено(Стр.Имя) Тогда
				ВызватьИсключение ""Параметр <Имя подключения> является обязательным!"";
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег(""Строка соединения"") Тогда
			Стр.ПутьКИнфобазе  = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег(""Порт"") Тогда
			Стр.ПортЗапускаТестКлиента = ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег(""Логин"") Тогда
			Логин = ЗначениеПараметра;
			Если Не ПустаяСтрока(Логин) Тогда
				СтрокаАутентификации = ""/N""+Логин;
				Если Найти(Логин, "" "") > 0 Тогда
					СтрокаАутентификации = ""/N"""""" + СокрЛП(Логин)+ """""""";
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег(""Пароль"") Тогда
			Если Не ПустаяСтрока(ЗначениеПараметра) Тогда
				Если Найти(ЗначениеПараметра, "" "") > 0 Тогда
					СтрокаАутентификации = СтрокаАутентификации + "" /P """""" + ЗначениеПараметра + """";
				Иначе
					СтрокаАутентификации = СтрокаАутентификации + "" /P"" + ЗначениеПараметра;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег(""Запускаемая обработка"") Тогда
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				Файл = Новый Файл(ЗначениеПараметра);
				Если Не Файл.Существует() Тогда
					ВызватьИсключение ""Параметр <Запускаемая обработка> указывает на не существующий файл!"";
				КонецЕсли;
				ДопПараметр = ДопПараметр + "" /EXECUTE "" + """""""" + ЗначениеПараметра + """""""";
			КонецЕсли;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег(""Дополнительные параметры строки запуска"") Тогда
			ДопПараметр = ДопПараметр + "" "" + ЗначениеПараметра;

		ИначеЕсли ВРег(ИмяПараметра) = ВРег(""Тип клиента"") Тогда
			Стр.ТипКлиента = ЗначениеПараметра;

		КонецЕсли;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(Стр.ТипКлиента) Тогда
		Стр.ТипКлиента = ""Тонкий"";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Стр.ПортЗапускаТестКлиента) Тогда
		Стр.ПортЗапускаТестКлиента = 1538;
	Иначе
		Стр.ПортЗапускаТестКлиента = Число(Стр.ПортЗапускаТестКлиента);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Стр.ПутьКИнфобазе) Тогда
		Стр.ПутьКИнфобазе = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Если СтрокаАутентификации <> """" И Найти(СтрокаАутентификации, ""/N"") = 0 Тогда
		ВызватьИсключение ""Параметр <Логин> не задан"";
	КонецЕсли;
	Стр.ДопПараметры = СтрокаАутентификации + "" "" +ДопПараметр;

	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;

	Отбор = Новый Структура;
	Отбор.Вставить(""Имя"", Стр.Имя);

	НайденныеСтроки = ДанныеКлиентовТестирования.НайтиСтроки(Отбор);

	Если НайденныеСтроки.Количество() = 0 Тогда
		// ToDo: проверить нахождение нового порта подключения в таблице клиентов

		НоваяСтрока = ДанныеКлиентовТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	Иначе
		НоваяСтрока = НайденныеСтроки.Получить(0);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		Сообщить(""Подключение с именем <""+Стр.Имя+""> перезаполнено в таблице подключений"");
	КонецЕсли;

	Возврат Стр.Имя;

КонецФункции

//окончание текста модуля",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}